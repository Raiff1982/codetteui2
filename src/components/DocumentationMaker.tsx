import React, { useState, useEffect } from 'react';
import { 
  BookOpen, 
  FileText, 
  Code, 
  Eye,
  Download,
  Share2,
  Sparkles,
  Brain,
  Target,
  CheckCircle,
  AlertTriangle,
  Lightbulb,
  Zap,
  Heart,
  Shield
} from 'lucide-react';

interface DocumentationSection {
  id: string;
  title: string;
  content: string;
  type: 'overview' | 'api' | 'examples' | 'tutorial' | 'ethics';
  completeness: number;
  auto_generated: boolean;
}

interface DocumentationMakerProps {
  currentCode: string;
  language: string;
  onDocumentationGenerated: (docs: string) => void;
}

export function DocumentationMaker({ currentCode, language, onDocumentationGenerated }: DocumentationMakerProps) {
  const [sections, setSections] = useState<DocumentationSection[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<'comprehensive' | 'api' | 'tutorial' | 'ethical'>('comprehensive');
  const [documentationScore, setDocumentationScore] = useState(0);

  useEffect(() => {
    if (currentCode.trim()) {
      analyzeDocumentationNeeds();
    }
  }, [currentCode]);

  const analyzeDocumentationNeeds = () => {
    // Analyze code to determine documentation needs
    const functions = (currentCode.match(/function\s+\w+|const\s+\w+\s*=/g) || []).length;
    const classes = (currentCode.match(/class\s+\w+/g) || []).length;
    const exports = (currentCode.match(/export\s+/g) || []).length;
    const comments = (currentCode.match(/\/\/|\/\*/g) || []).length;
    
    const totalElements = functions + classes + exports;
    const documentationRatio = comments / Math.max(totalElements, 1);
    
    setDocumentationScore(Math.min(100, documentationRatio * 100));
    
    // Generate documentation sections based on code analysis
    const newSections: DocumentationSection[] = [];
    
    if (functions > 0) {
      newSections.push({
        id: 'functions',
        title: 'Functions',
        content: `This module contains ${functions} function${functions > 1 ? 's' : ''}.`,
        type: 'api',
        completeness: documentationRatio,
        auto_generated: true
      });
    }
    
    if (classes > 0) {
      newSections.push({
        id: 'classes',
        title: 'Classes',
        content: `This module defines ${classes} class${classes > 1 ? 'es' : ''}.`,
        type: 'api',
        completeness: documentationRatio,
        auto_generated: true
      });
    }
    
    if (exports > 0) {
      newSections.push({
        id: 'exports',
        title: 'Public API',
        content: `This module exports ${exports} public interface${exports > 1 ? 's' : ''}.`,
        type: 'api',
        completeness: documentationRatio,
        auto_generated: true
      });
    }
    
    setSections(newSections);
  };

  const generateDocumentation = async () => {
    setIsGenerating(true);
    
    try {
      // Simulate AI documentation generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const documentation = generateDocumentationContent(selectedTemplate);
      onDocumentationGenerated(documentation);
      
      // Update sections with generated content
      setSections(prev => prev.map(section => ({
        ...section,
        completeness: 0.9,
        auto_generated: true
      })));
      
    } catch (error) {
      console.error('Documentation generation failed:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const generateDocumentationContent = (template: string): string => {
    const timestamp = new Date().toISOString();
    
    switch (template) {
      case 'comprehensive':
        return `# ${language.charAt(0).toUpperCase() + language.slice(1)} Module Documentation

## Overview
This module provides comprehensive functionality for ${language} development with AI-powered assistance.

## Features
- Intelligent code completion
- Ethical AI governance
- Performance optimization
- Accessibility compliance

## Usage
\`\`\`${language}
// Example usage
${currentCode.split('\n').slice(0, 10).join('\n')}
\`\`\`

## API Reference
${generateAPIReference()}

## Ethical Considerations
This code follows virtue-driven development principles:
- **Compassion**: User-friendly error messages and accessibility
- **Integrity**: Secure and reliable implementation
- **Wisdom**: Well-documented and maintainable code
- **Courage**: Tackles complex problems with innovative solutions

## Contributing
Please follow our ethical development guidelines when contributing.

---
*Generated by Codette AI Documentation System on ${timestamp}*
*Built with virtue-driven AI and genuine care for developers*`;

      case 'api':
        return `# API Documentation

## Functions
${generateFunctionDocs()}

## Classes
${generateClassDocs()}

## Types
${generateTypeDocs()}

---
*Auto-generated API documentation*`;

      case 'tutorial':
        return `# Tutorial: Getting Started

## Step 1: Understanding the Code
${currentCode.split('\n').slice(0, 5).join('\n')}

## Step 2: Key Concepts
- Learn the fundamental patterns
- Understand the architecture
- Practice with examples

## Step 3: Advanced Features
- Explore AI assistance
- Use ethical analysis
- Optimize performance

---
*Interactive tutorial generated by Codette AI*`;

      case 'ethical':
        return `# Ethical Development Guide

## Virtue-Driven Principles
This code follows ethical development practices:

### Compassion
- User-friendly interfaces
- Accessible design
- Helpful error messages

### Integrity
- Secure implementations
- Honest documentation
- Reliable functionality

### Wisdom
- Well-architected solutions
- Maintainable code
- Clear documentation

### Courage
- Innovative approaches
- Difficult problem solving
- Ethical decision making

## Ethical Checklist
- [ ] Code is accessible to all users
- [ ] Security vulnerabilities addressed
- [ ] User privacy protected
- [ ] Transparent algorithms
- [ ] Inclusive language used

---
*Ethical analysis powered by Aegis Council AI*`;

      default:
        return `# Documentation\n\nGenerated documentation for ${language} code.\n\n${currentCode}`;
    }
  };

  const generateAPIReference = (): string => {
    const functions = currentCode.match(/function\s+(\w+)/g) || [];
    const classes = currentCode.match(/class\s+(\w+)/g) || [];
    
    let apiRef = '';
    
    if (functions.length > 0) {
      apiRef += '\n### Functions\n';
      functions.forEach(func => {
        const name = func.replace('function ', '');
        apiRef += `- \`${name}\`: Function description\n`;
      });
    }
    
    if (classes.length > 0) {
      apiRef += '\n### Classes\n';
      classes.forEach(cls => {
        const name = cls.replace('class ', '');
        apiRef += `- \`${name}\`: Class description\n`;
      });
    }
    
    return apiRef;
  };

  const generateFunctionDocs = (): string => {
    const functions = currentCode.match(/function\s+\w+/g) || [];
    return functions.map(func => `### ${func}\nFunction documentation here.\n`).join('\n');
  };

  const generateClassDocs = (): string => {
    const classes = currentCode.match(/class\s+\w+/g) || [];
    return classes.map(cls => `### ${cls}\nClass documentation here.\n`).join('\n');
  };

  const generateTypeDocs = (): string => {
    const types = currentCode.match(/interface\s+\w+|type\s+\w+/g) || [];
    return types.map(type => `### ${type}\nType documentation here.\n`).join('\n');
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    if (score >= 40) return 'text-orange-600';
    return 'text-red-600';
  };

  const getScoreBg = (score: number) => {
    if (score >= 80) return 'bg-green-100 dark:bg-green-900/20';
    if (score >= 60) return 'bg-yellow-100 dark:bg-yellow-900/20';
    if (score >= 40) return 'bg-orange-100 dark:bg-orange-900/20';
    return 'bg-red-100 dark:bg-red-900/20';
  };

  return (
    <div className="bg-gradient-to-br from-white/95 via-blue-50/80 to-purple-50/80 dark:from-gray-800/95 dark:via-blue-950/80 dark:to-purple-950/80 backdrop-blur-xl rounded-2xl p-6 shadow-2xl border border-blue-200/50 dark:border-blue-700/50">
      <div className="flex items-center space-x-3 mb-6">
        <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
          <BookOpen className="w-6 h-6 text-white" />
        </div>
        <div>
          <h3 className="text-lg font-bold text-gray-800 dark:text-white">
            AI Documentation Generator
          </h3>
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Intelligent documentation with ethical considerations
          </p>
        </div>
      </div>

      {/* Documentation Score */}
      <div className={`p-4 rounded-xl mb-6 ${getScoreBg(documentationScore)}`}>
        <div className="flex items-center justify-between mb-3">
          <h4 className="font-bold text-gray-800 dark:text-white">Documentation Score</h4>
          <span className={`text-2xl font-bold ${getScoreColor(documentationScore)}`}>
            {documentationScore.toFixed(0)}%
          </span>
        </div>
        
        <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
          <div
            className={`h-2 rounded-full transition-all duration-500 ${
              documentationScore >= 80 ? 'bg-green-500' :
              documentationScore >= 60 ? 'bg-yellow-500' :
              documentationScore >= 40 ? 'bg-orange-500' : 'bg-red-500'
            }`}
            style={{ width: `${documentationScore}%` }}
          />
        </div>
      </div>

      {/* Template Selection */}
      <div className="mb-6">
        <h4 className="font-bold text-gray-800 dark:text-white mb-3">Documentation Template</h4>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {[
            { id: 'comprehensive', label: 'Comprehensive', icon: BookOpen, desc: 'Complete documentation' },
            { id: 'api', label: 'API Reference', icon: Code, desc: 'Function and class docs' },
            { id: 'tutorial', label: 'Tutorial', icon: Lightbulb, desc: 'Step-by-step guide' },
            { id: 'ethical', label: 'Ethical Guide', icon: Shield, desc: 'Virtue-driven analysis' }
          ].map(template => (
            <button
              key={template.id}
              onClick={() => setSelectedTemplate(template.id as any)}
              className={`p-3 rounded-xl text-center transition-all duration-200 hover:scale-105 ${
                selectedTemplate === template.id
                  ? 'bg-gradient-to-r from-purple-500 to-blue-600 text-white shadow-lg'
                  : 'bg-gradient-to-r from-gray-100 to-blue-50 dark:from-gray-700 dark:to-blue-950/50 text-gray-700 dark:text-gray-300 hover:shadow-lg'
              }`}
            >
              <template.icon className="w-6 h-6 mx-auto mb-2" />
              <h5 className="font-medium text-sm">{template.label}</h5>
              <p className="text-xs opacity-75">{template.desc}</p>
            </button>
          ))}
        </div>
      </div>

      {/* Generate Button */}
      <div className="text-center">
        <button
          onClick={generateDocumentation}
          disabled={isGenerating || !currentCode.trim()}
          className="flex items-center space-x-2 px-8 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:from-blue-600 hover:to-purple-700 disabled:opacity-50 transition-all duration-200 shadow-lg hover:shadow-xl hover:scale-105 mx-auto"
        >
          {isGenerating ? (
            <>
              <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
              <span>Generating Documentation...</span>
            </>
          ) : (
            <>
              <Sparkles className="w-5 h-5" />
              <span>Generate AI Documentation</span>
            </>
          )}
        </button>
      </div>

      {/* Documentation Sections */}
      {sections.length > 0 && (
        <div className="mt-6 space-y-3">
          <h4 className="font-bold text-gray-800 dark:text-white">Documentation Sections</h4>
          {sections.map(section => (
            <div key={section.id} className="bg-gradient-to-r from-white/80 to-blue-50/80 dark:from-gray-700/80 dark:to-blue-950/80 backdrop-blur-sm rounded-xl p-4 border border-blue-200/50 dark:border-blue-700/50">
              <div className="flex items-center justify-between mb-2">
                <h5 className="font-medium text-gray-800 dark:text-white">{section.title}</h5>
                <div className="flex items-center space-x-2">
                  {section.auto_generated && (
                    <span className="px-2 py-1 bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300 text-xs rounded-full">
                      AI Generated
                    </span>
                  )}
                  <span className="text-xs text-gray-500 dark:text-gray-400">
                    {(section.completeness * 100).toFixed(0)}% complete
                  </span>
                </div>
              </div>
              
              <p className="text-sm text-gray-600 dark:text-gray-300 mb-3">
                {section.content}
              </p>
              
              <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                <div
                  className="bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-500"
                  style={{ width: `${section.completeness * 100}%` }}
                />
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Documentation Tips */}
      <div className="mt-6 bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 rounded-xl p-4 border border-yellow-200/50 dark:border-yellow-700/50">
        <div className="flex items-center space-x-2 mb-3">
          <Lightbulb className="w-5 h-5 text-yellow-600" />
          <h4 className="font-bold text-gray-800 dark:text-white">Documentation Best Practices</h4>
        </div>
        
        <div className="space-y-2 text-sm text-gray-700 dark:text-gray-300">
          <div className="flex items-start space-x-2">
            <CheckCircle className="w-4 h-4 text-green-600 mt-0.5" />
            <span>Include ethical considerations and user impact</span>
          </div>
          <div className="flex items-start space-x-2">
            <CheckCircle className="w-4 h-4 text-green-600 mt-0.5" />
            <span>Provide clear examples and use cases</span>
          </div>
          <div className="flex items-start space-x-2">
            <CheckCircle className="w-4 h-4 text-green-600 mt-0.5" />
            <span>Document accessibility features and considerations</span>
          </div>
          <div className="flex items-start space-x-2">
            <CheckCircle className="w-4 h-4 text-green-600 mt-0.5" />
            <span>Explain AI decision-making processes transparently</span>
          </div>
        </div>
      </div>
    </div>
  );
}